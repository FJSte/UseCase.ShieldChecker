// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShieldChecker.WebApp;

#nullable disable

namespace ShieldChecker.WebApp.Migrations
{
    [DbContext(typeof(ShieldCheckerContext))]
    [Migration("20250101220246_Add DC log")]
    partial class AddDClog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.SchedulerMutex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchedulerType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SchedulerMutex", (string)null);
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.Settings", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("DcVMImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DcVMSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainControllerName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("DomainFQDN")
                        .IsRequired()
                        .HasMaxLength(253)
                        .HasColumnType("nvarchar(253)");

                    b.Property<int>("JobTimeout")
                        .HasColumnType("int");

                    b.Property<string>("MDELinuxOnboardingScript")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MDEWindowsOnboardingScript")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MDIKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxWorkerCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("WorkerVMLinuxImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerVMSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerVMWindowsImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Settings", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SettingsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.SystemStatus", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("DomainControllerLog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DomainControllerStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsFirstRunCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("WebAppVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SystemStatus", (string)null);
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.TestDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ElevationRequired")
                        .HasColumnType("bit");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int>("ExecutorSystemType")
                        .HasColumnType("int");

                    b.Property<int>("ExecutorUserType")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedAlertTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MitreTechnique")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OperatingSystem")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<bool?>("ReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("ScriptCleanup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScriptPrerequisites")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScriptTest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TestDefinition", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TestDefinitionHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.TestJob", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetectedAlerts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<string>("ReviewResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulerLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TestOutput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UseCaseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WorkerEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkerIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerRemoteIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WorkerStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("UseCaseID");

                    b.ToTable("TestJob", (string)null);
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UserPrincipalName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserInfo", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UserInfoHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.TestDefinition", b =>
                {
                    b.HasOne("ShieldChecker.WebApp.Models.Db.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ShieldChecker.WebApp.Models.Db.UserInfo", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.TestJob", b =>
                {
                    b.HasOne("ShieldChecker.WebApp.Models.Db.TestDefinition", "UseCase")
                        .WithMany("TestJobs")
                        .HasForeignKey("UseCaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UseCase");
                });

            modelBuilder.Entity("ShieldChecker.WebApp.Models.Db.TestDefinition", b =>
                {
                    b.Navigation("TestJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
